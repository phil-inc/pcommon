// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -source=./interface.go -destination=./mocks/PgxConnPool.go -package=mock_postgres PgxConnPool
//

// Package mock_postgres is a generated GoMock package.
package mock_postgres

import (
	context "context"
	io "io"
	reflect "reflect"

	pgx "github.com/jackc/pgx"
	gomock "go.uber.org/mock/gomock"
)

// MockPgxConnPool is a mock of PgxConnPool interface.
type MockPgxConnPool struct {
	ctrl     *gomock.Controller
	recorder *MockPgxConnPoolMockRecorder
	isgomock struct{}
}

// MockPgxConnPoolMockRecorder is the mock recorder for MockPgxConnPool.
type MockPgxConnPoolMockRecorder struct {
	mock *MockPgxConnPool
}

// NewMockPgxConnPool creates a new mock instance.
func NewMockPgxConnPool(ctrl *gomock.Controller) *MockPgxConnPool {
	mock := &MockPgxConnPool{ctrl: ctrl}
	mock.recorder = &MockPgxConnPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPgxConnPool) EXPECT() *MockPgxConnPoolMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockPgxConnPool) Acquire() (*pgx.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire")
	ret0, _ := ret[0].(*pgx.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Acquire indicates an expected call of Acquire.
func (mr *MockPgxConnPoolMockRecorder) Acquire() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockPgxConnPool)(nil).Acquire))
}

// AcquireEx mocks base method.
func (m *MockPgxConnPool) AcquireEx(ctx context.Context) (*pgx.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireEx", ctx)
	ret0, _ := ret[0].(*pgx.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireEx indicates an expected call of AcquireEx.
func (mr *MockPgxConnPoolMockRecorder) AcquireEx(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireEx", reflect.TypeOf((*MockPgxConnPool)(nil).AcquireEx), ctx)
}

// Begin mocks base method.
func (m *MockPgxConnPool) Begin() (*pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(*pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockPgxConnPoolMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockPgxConnPool)(nil).Begin))
}

// BeginBatch mocks base method.
func (m *MockPgxConnPool) BeginBatch() *pgx.Batch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginBatch")
	ret0, _ := ret[0].(*pgx.Batch)
	return ret0
}

// BeginBatch indicates an expected call of BeginBatch.
func (mr *MockPgxConnPoolMockRecorder) BeginBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginBatch", reflect.TypeOf((*MockPgxConnPool)(nil).BeginBatch))
}

// BeginEx mocks base method.
func (m *MockPgxConnPool) BeginEx(ctx context.Context, txOptions *pgx.TxOptions) (*pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginEx", ctx, txOptions)
	ret0, _ := ret[0].(*pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginEx indicates an expected call of BeginEx.
func (mr *MockPgxConnPoolMockRecorder) BeginEx(ctx, txOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginEx", reflect.TypeOf((*MockPgxConnPool)(nil).BeginEx), ctx, txOptions)
}

// Close mocks base method.
func (m *MockPgxConnPool) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockPgxConnPoolMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPgxConnPool)(nil).Close))
}

// CopyFrom mocks base method.
func (m *MockPgxConnPool) CopyFrom(tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFrom", tableName, columnNames, rowSrc)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyFrom indicates an expected call of CopyFrom.
func (mr *MockPgxConnPoolMockRecorder) CopyFrom(tableName, columnNames, rowSrc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFrom", reflect.TypeOf((*MockPgxConnPool)(nil).CopyFrom), tableName, columnNames, rowSrc)
}

// CopyFromReader mocks base method.
func (m *MockPgxConnPool) CopyFromReader(r io.Reader, sql string) (pgx.CommandTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFromReader", r, sql)
	ret0, _ := ret[0].(pgx.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyFromReader indicates an expected call of CopyFromReader.
func (mr *MockPgxConnPoolMockRecorder) CopyFromReader(r, sql any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFromReader", reflect.TypeOf((*MockPgxConnPool)(nil).CopyFromReader), r, sql)
}

// CopyToWriter mocks base method.
func (m *MockPgxConnPool) CopyToWriter(w io.Writer, sql string, args ...any) (pgx.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []any{w, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyToWriter", varargs...)
	ret0, _ := ret[0].(pgx.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyToWriter indicates an expected call of CopyToWriter.
func (mr *MockPgxConnPoolMockRecorder) CopyToWriter(w, sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{w, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyToWriter", reflect.TypeOf((*MockPgxConnPool)(nil).CopyToWriter), varargs...)
}

// Deallocate mocks base method.
func (m *MockPgxConnPool) Deallocate(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deallocate", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deallocate indicates an expected call of Deallocate.
func (mr *MockPgxConnPoolMockRecorder) Deallocate(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deallocate", reflect.TypeOf((*MockPgxConnPool)(nil).Deallocate), name)
}

// Exec mocks base method.
func (m *MockPgxConnPool) Exec(sql string, arguments ...any) (pgx.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []any{sql}
	for _, a := range arguments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgx.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockPgxConnPoolMockRecorder) Exec(sql any, arguments ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{sql}, arguments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockPgxConnPool)(nil).Exec), varargs...)
}

// ExecEx mocks base method.
func (m *MockPgxConnPool) ExecEx(ctx context.Context, sql string, options *pgx.QueryExOptions, arguments ...any) (pgx.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql, options}
	for _, a := range arguments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecEx", varargs...)
	ret0, _ := ret[0].(pgx.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecEx indicates an expected call of ExecEx.
func (mr *MockPgxConnPoolMockRecorder) ExecEx(ctx, sql, options any, arguments ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql, options}, arguments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecEx", reflect.TypeOf((*MockPgxConnPool)(nil).ExecEx), varargs...)
}

// Prepare mocks base method.
func (m *MockPgxConnPool) Prepare(name, sql string) (*pgx.PreparedStatement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", name, sql)
	ret0, _ := ret[0].(*pgx.PreparedStatement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MockPgxConnPoolMockRecorder) Prepare(name, sql any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockPgxConnPool)(nil).Prepare), name, sql)
}

// PrepareEx mocks base method.
func (m *MockPgxConnPool) PrepareEx(ctx context.Context, name, sql string, opts *pgx.PrepareExOptions) (*pgx.PreparedStatement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareEx", ctx, name, sql, opts)
	ret0, _ := ret[0].(*pgx.PreparedStatement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareEx indicates an expected call of PrepareEx.
func (mr *MockPgxConnPoolMockRecorder) PrepareEx(ctx, name, sql, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareEx", reflect.TypeOf((*MockPgxConnPool)(nil).PrepareEx), ctx, name, sql, opts)
}

// Query mocks base method.
func (m *MockPgxConnPool) Query(sql string, args ...any) (*pgx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockPgxConnPoolMockRecorder) Query(sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockPgxConnPool)(nil).Query), varargs...)
}

// QueryEx mocks base method.
func (m *MockPgxConnPool) QueryEx(ctx context.Context, sql string, options *pgx.QueryExOptions, args ...any) (*pgx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql, options}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryEx", varargs...)
	ret0, _ := ret[0].(*pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryEx indicates an expected call of QueryEx.
func (mr *MockPgxConnPoolMockRecorder) QueryEx(ctx, sql, options any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql, options}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryEx", reflect.TypeOf((*MockPgxConnPool)(nil).QueryEx), varargs...)
}

// QueryRow mocks base method.
func (m *MockPgxConnPool) QueryRow(sql string, args ...any) *pgx.Row {
	m.ctrl.T.Helper()
	varargs := []any{sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(*pgx.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockPgxConnPoolMockRecorder) QueryRow(sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockPgxConnPool)(nil).QueryRow), varargs...)
}

// QueryRowEx mocks base method.
func (m *MockPgxConnPool) QueryRowEx(ctx context.Context, sql string, options *pgx.QueryExOptions, args ...any) *pgx.Row {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql, options}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowEx", varargs...)
	ret0, _ := ret[0].(*pgx.Row)
	return ret0
}

// QueryRowEx indicates an expected call of QueryRowEx.
func (mr *MockPgxConnPoolMockRecorder) QueryRowEx(ctx, sql, options any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql, options}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowEx", reflect.TypeOf((*MockPgxConnPool)(nil).QueryRowEx), varargs...)
}

// Release mocks base method.
func (m *MockPgxConnPool) Release(conn *pgx.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release", conn)
}

// Release indicates an expected call of Release.
func (mr *MockPgxConnPoolMockRecorder) Release(conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockPgxConnPool)(nil).Release), conn)
}

// Reset mocks base method.
func (m *MockPgxConnPool) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockPgxConnPoolMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockPgxConnPool)(nil).Reset))
}

// Stat mocks base method.
func (m *MockPgxConnPool) Stat() pgx.ConnPoolStat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(pgx.ConnPoolStat)
	return ret0
}

// Stat indicates an expected call of Stat.
func (mr *MockPgxConnPoolMockRecorder) Stat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockPgxConnPool)(nil).Stat))
}
